{"ast":null,"code":"var _jsxFileName = \"/Users/ldeniz/dev/APIReact/genn/src/App.js\";\nimport logo from \"./assets/img/logo.svg\";\nimport './assets/css/App.css';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Router from './Router';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Router, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"GeNN Service.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Los algoritmos de clasificaci\\xF3n supervisada resuelven un tipo de problema espec\\xEDfico donde se cuenta con una serie de datos previamente clasificados. Para poder decidir la clasificaci\\xF3n de una muestra, se tiene en cuenta toda la informaci\\xF3n que se pueda extraer de un conjunto de datos inicial, de datos cuya clase es conocida por el clasificador. En este trabajo se implementa una aplicaci\\xF3n web que permite al usuario entrenar una red neuronal, cargando un dataset de entrenamiento para ello y devolvi\\xE9ndole la definici\\xF3n de la red entrenada junto con informaci\\xF3n sobre la fidelidad de esta. Adem\\xE1s podr\\xE1 ingresar opcionalmente un dataset adicional que ser\\xE1 procesado y clasificado con la misma red generada. La aplicaci\\xF3n es construida sobre una arquitectura de tres capas, contando con una interfaz web que permitir\\xE1 al usuario interactuar con el software, y cuyo Core es una API construida en Python. Esta \\xFAltima ser\\xE1 la responsable de entrenar la red neuronal. Se aborda el dise\\xF1o del Core utilizando t\\xE9cnicas de clasificaci\\xF3n supervisada bajo entrenamiento de redes neuronales evolutivas por medio de algoritmos gen\\xE9ticos. El uso de algoritmos gen\\xE9ticos permite a la red crecer tanto en n\\xFAmero de nodos como de capas de manera din\\xE1mica, en funci\\xF3n de lo que ella misma considere necesaria para su propio entrenamiento.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ldeniz/dev/APIReact/genn/src/App.js"],"names":["Header","Footer","Router","App"],"mappings":";;AACA,OAAO,sBAAP;AACA,OAAOA,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;AAEA,SAASC,GAAT,GAAe;AACb,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BAEE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAHF,eAKE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eAcE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;;KAnBQA,G;AAqBT,eAAeA,GAAf","sourcesContent":["import logo from './assets/img/logo.svg';\nimport './assets/css/App.css';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Router from './Router';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <Router/>\n      <Header />\n      {/* Importar el header */}\n      <header className=\"App-header\">\n        <h1>GeNN Service.</h1>\n        <p>\n          Los algoritmos de clasificación supervisada resuelven un tipo de problema específico donde se cuenta con una serie de datos previamente clasificados. Para poder decidir la clasificación de una muestra, se tiene en cuenta toda la información que se pueda extraer de un conjunto de datos inicial, de datos cuya clase es conocida por el clasificador.\n          En este trabajo se implementa una aplicación web que permite al usuario entrenar una red neuronal, cargando un dataset de entrenamiento para ello y devolviéndole la definición de la red entrenada junto con información sobre la fidelidad de esta. Además podrá ingresar opcionalmente un dataset adicional que será procesado y clasificado con la misma red generada.\n          La aplicación es construida sobre una arquitectura de tres capas, contando con una interfaz web que permitirá al usuario interactuar con el software, y cuyo Core es una API construida en Python. Esta última será la responsable de entrenar la red neuronal.\n          Se aborda el diseño del Core utilizando técnicas de clasificación supervisada bajo entrenamiento de redes neuronales evolutivas por medio de algoritmos genéticos. El uso de algoritmos genéticos permite a la red crecer tanto en número de nodos como de capas de manera dinámica, en función de lo que ella misma considere necesaria para su propio entrenamiento.\n        </p>\n      </header>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}